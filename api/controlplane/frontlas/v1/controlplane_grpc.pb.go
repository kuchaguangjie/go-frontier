// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: controlplane.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClusterService_GetFrontierByEdge_FullMethodName        = "/controlplane.ClusterService/GetFrontierByEdge"
	ClusterService_MultiGetFrontiersByEdges_FullMethodName = "/controlplane.ClusterService/MultiGetFrontiersByEdges"
)

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterServiceClient interface {
	GetFrontierByEdge(ctx context.Context, in *GetFrontierByEdgeIDRequest, opts ...grpc.CallOption) (*GetFrontierByEdgeIDResponse, error)
	MultiGetFrontiersByEdges(ctx context.Context, in *GetFrontierByEdgeIDsRequest, opts ...grpc.CallOption) (*GetFrontiersByEdgeIDsResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) GetFrontierByEdge(ctx context.Context, in *GetFrontierByEdgeIDRequest, opts ...grpc.CallOption) (*GetFrontierByEdgeIDResponse, error) {
	out := new(GetFrontierByEdgeIDResponse)
	err := c.cc.Invoke(ctx, ClusterService_GetFrontierByEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) MultiGetFrontiersByEdges(ctx context.Context, in *GetFrontierByEdgeIDsRequest, opts ...grpc.CallOption) (*GetFrontiersByEdgeIDsResponse, error) {
	out := new(GetFrontiersByEdgeIDsResponse)
	err := c.cc.Invoke(ctx, ClusterService_MultiGetFrontiersByEdges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations must embed UnimplementedClusterServiceServer
// for forward compatibility
type ClusterServiceServer interface {
	GetFrontierByEdge(context.Context, *GetFrontierByEdgeIDRequest) (*GetFrontierByEdgeIDResponse, error)
	MultiGetFrontiersByEdges(context.Context, *GetFrontierByEdgeIDsRequest) (*GetFrontiersByEdgeIDsResponse, error)
	mustEmbedUnimplementedClusterServiceServer()
}

// UnimplementedClusterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (UnimplementedClusterServiceServer) GetFrontierByEdge(context.Context, *GetFrontierByEdgeIDRequest) (*GetFrontierByEdgeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontierByEdge not implemented")
}
func (UnimplementedClusterServiceServer) MultiGetFrontiersByEdges(context.Context, *GetFrontierByEdgeIDsRequest) (*GetFrontiersByEdgeIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiGetFrontiersByEdges not implemented")
}
func (UnimplementedClusterServiceServer) mustEmbedUnimplementedClusterServiceServer() {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_GetFrontierByEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontierByEdgeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetFrontierByEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_GetFrontierByEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetFrontierByEdge(ctx, req.(*GetFrontierByEdgeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_MultiGetFrontiersByEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontierByEdgeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).MultiGetFrontiersByEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_MultiGetFrontiersByEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).MultiGetFrontiersByEdges(ctx, req.(*GetFrontierByEdgeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrontierByEdge",
			Handler:    _ClusterService_GetFrontierByEdge_Handler,
		},
		{
			MethodName: "MultiGetFrontiersByEdges",
			Handler:    _ClusterService_MultiGetFrontiersByEdges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane.proto",
}
