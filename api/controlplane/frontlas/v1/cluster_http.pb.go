// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.14.0
// source: cluster.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClusterServiceGetEdgeByID = "/controlplane.ClusterService/GetEdgeByID"
const OperationClusterServiceGetEdgesCount = "/controlplane.ClusterService/GetEdgesCount"
const OperationClusterServiceGetFrontierByEdge = "/controlplane.ClusterService/GetFrontierByEdge"
const OperationClusterServiceGetServiceByID = "/controlplane.ClusterService/GetServiceByID"
const OperationClusterServiceGetServicesCount = "/controlplane.ClusterService/GetServicesCount"
const OperationClusterServiceListEdges = "/controlplane.ClusterService/ListEdges"
const OperationClusterServiceListFrontiers = "/controlplane.ClusterService/ListFrontiers"
const OperationClusterServiceListServices = "/controlplane.ClusterService/ListServices"

type ClusterServiceHTTPServer interface {
	GetEdgeByID(context.Context, *GetEdgeByIDRequest) (*GetEdgeByIDResponse, error)
	GetEdgesCount(context.Context, *GetEdgesCountRequest) (*GetEdgesCountResponse, error)
	GetFrontierByEdge(context.Context, *GetFrontierByEdgeIDRequest) (*GetFrontierByEdgeIDResponse, error)
	GetServiceByID(context.Context, *GetServiceByIDRequest) (*GetServiceByIDResponse, error)
	GetServicesCount(context.Context, *GetServicesCountRequest) (*GetServicesCountResponse, error)
	ListEdges(context.Context, *ListEdgesRequest) (*ListEdgesResponse, error)
	ListFrontiers(context.Context, *ListFrontiersRequest) (*ListFrontiersResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
}

func RegisterClusterServiceHTTPServer(s *http.Server, srv ClusterServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/cluster/v1/frontier", _ClusterService_GetFrontierByEdge0_HTTP_Handler(srv))
	r.GET("/cluster/v1/frontiers", _ClusterService_ListFrontiers0_HTTP_Handler(srv))
	r.GET("/cluster/v1/edges", _ClusterService_ListEdges0_HTTP_Handler(srv))
	r.GET("/cluster/v1/edge", _ClusterService_GetEdgeByID0_HTTP_Handler(srv))
	r.GET("/cluster/v1/edges/count", _ClusterService_GetEdgesCount0_HTTP_Handler(srv))
	r.GET("/cluster/v1/services", _ClusterService_ListServices0_HTTP_Handler(srv))
	r.GET("/cluster/v1/service", _ClusterService_GetServiceByID0_HTTP_Handler(srv))
	r.GET("/cluster/v1/services/count", _ClusterService_GetServicesCount0_HTTP_Handler(srv))
}

func _ClusterService_GetFrontierByEdge0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFrontierByEdgeIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetFrontierByEdge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFrontierByEdge(ctx, req.(*GetFrontierByEdgeIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFrontierByEdgeIDResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_ListFrontiers0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFrontiersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceListFrontiers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFrontiers(ctx, req.(*ListFrontiersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFrontiersResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_ListEdges0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEdgesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceListEdges)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEdges(ctx, req.(*ListEdgesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEdgesResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetEdgeByID0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEdgeByIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetEdgeByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEdgeByID(ctx, req.(*GetEdgeByIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEdgeByIDResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetEdgesCount0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEdgesCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetEdgesCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEdgesCount(ctx, req.(*GetEdgesCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEdgesCountResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_ListServices0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceListServices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServices(ctx, req.(*ListServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServicesResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetServiceByID0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceByIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetServiceByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServiceByID(ctx, req.(*GetServiceByIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetServiceByIDResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetServicesCount0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServicesCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetServicesCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServicesCount(ctx, req.(*GetServicesCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetServicesCountResponse)
		return ctx.Result(200, reply)
	}
}

type ClusterServiceHTTPClient interface {
	GetEdgeByID(ctx context.Context, req *GetEdgeByIDRequest, opts ...http.CallOption) (rsp *GetEdgeByIDResponse, err error)
	GetEdgesCount(ctx context.Context, req *GetEdgesCountRequest, opts ...http.CallOption) (rsp *GetEdgesCountResponse, err error)
	GetFrontierByEdge(ctx context.Context, req *GetFrontierByEdgeIDRequest, opts ...http.CallOption) (rsp *GetFrontierByEdgeIDResponse, err error)
	GetServiceByID(ctx context.Context, req *GetServiceByIDRequest, opts ...http.CallOption) (rsp *GetServiceByIDResponse, err error)
	GetServicesCount(ctx context.Context, req *GetServicesCountRequest, opts ...http.CallOption) (rsp *GetServicesCountResponse, err error)
	ListEdges(ctx context.Context, req *ListEdgesRequest, opts ...http.CallOption) (rsp *ListEdgesResponse, err error)
	ListFrontiers(ctx context.Context, req *ListFrontiersRequest, opts ...http.CallOption) (rsp *ListFrontiersResponse, err error)
	ListServices(ctx context.Context, req *ListServicesRequest, opts ...http.CallOption) (rsp *ListServicesResponse, err error)
}

type ClusterServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterServiceHTTPClient(client *http.Client) ClusterServiceHTTPClient {
	return &ClusterServiceHTTPClientImpl{client}
}

func (c *ClusterServiceHTTPClientImpl) GetEdgeByID(ctx context.Context, in *GetEdgeByIDRequest, opts ...http.CallOption) (*GetEdgeByIDResponse, error) {
	var out GetEdgeByIDResponse
	pattern := "/cluster/v1/edge"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetEdgeByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) GetEdgesCount(ctx context.Context, in *GetEdgesCountRequest, opts ...http.CallOption) (*GetEdgesCountResponse, error) {
	var out GetEdgesCountResponse
	pattern := "/cluster/v1/edges/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetEdgesCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) GetFrontierByEdge(ctx context.Context, in *GetFrontierByEdgeIDRequest, opts ...http.CallOption) (*GetFrontierByEdgeIDResponse, error) {
	var out GetFrontierByEdgeIDResponse
	pattern := "/cluster/v1/frontier"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetFrontierByEdge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) GetServiceByID(ctx context.Context, in *GetServiceByIDRequest, opts ...http.CallOption) (*GetServiceByIDResponse, error) {
	var out GetServiceByIDResponse
	pattern := "/cluster/v1/service"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetServiceByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) GetServicesCount(ctx context.Context, in *GetServicesCountRequest, opts ...http.CallOption) (*GetServicesCountResponse, error) {
	var out GetServicesCountResponse
	pattern := "/cluster/v1/services/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetServicesCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) ListEdges(ctx context.Context, in *ListEdgesRequest, opts ...http.CallOption) (*ListEdgesResponse, error) {
	var out ListEdgesResponse
	pattern := "/cluster/v1/edges"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceListEdges))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) ListFrontiers(ctx context.Context, in *ListFrontiersRequest, opts ...http.CallOption) (*ListFrontiersResponse, error) {
	var out ListFrontiersResponse
	pattern := "/cluster/v1/frontiers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceListFrontiers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClusterServiceHTTPClientImpl) ListServices(ctx context.Context, in *ListServicesRequest, opts ...http.CallOption) (*ListServicesResponse, error) {
	var out ListServicesResponse
	pattern := "/cluster/v1/services"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceListServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
